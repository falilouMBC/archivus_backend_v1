import { GoogleGenerativeAI } from '@google/generative-ai';
import * as dotenv from 'dotenv';

dotenv.config();

const API_KEY = process.env.GEMINI_API_KEY;

if (!API_KEY) {
  console.error("‚ùå Erreur: GEMINI_API_KEY n'est pas d√©finie dans les variables d'environnement.");
  console.log("üí° Cr√©ez un fichier .env avec: GEMINI_API_KEY=your_api_key_here");
  process.exit(1);
}

interface ModelResult {
  name: string;
  status: string;
  testResponse?: string;
  error?: string;
}

async function listAvailableModels(): Promise<void> {
  try {
    console.log("üîç Recherche des mod√®les Gemini disponibles dans votre r√©gion...\n");
    
    const genAI = new GoogleGenerativeAI(API_KEY!);
    
    // Liste des mod√®les √† tester
    const modelsToTest: string[] = [
      'gemini-pro',
      'gemini-pro-vision',
      'gemini-1.5-pro',
      'gemini-1.5-flash',
      'gemini-1.0-pro',
      'gemini-1.0-pro-vision'
    ];
    
    const availableModels: ModelResult[] = [];
    const unavailableModels: ModelResult[] = [];
    
    console.log("üìã Test des mod√®les:\n");
    
    for (const modelName of modelsToTest) {
      try {
        console.log(`‚è≥ Test de ${modelName}...`);
        
        const model = genAI.getGenerativeModel({ model: modelName });
        
        // Test simple avec un prompt court
        const testPrompt = "Bonjour";
        const result = await model.generateContent(testPrompt);
        const response = await result.response;
        const text = response.text();
        
        if (text && text.length > 0) {
          availableModels.push({
            name: modelName,
            status: '‚úÖ Disponible',
            testResponse: text.substring(0, 50) + (text.length > 50 ? '...' : '')
          });
          console.log(`‚úÖ ${modelName} - Disponible`);
        } else {
          unavailableModels.push({
            name: modelName,
            status: '‚ùå Pas de r√©ponse'
          });
          console.log(`‚ùå ${modelName} - Pas de r√©ponse`);
        }
        
      } catch (error: any) {
        unavailableModels.push({
          name: modelName,
          status: '‚ùå Erreur',
          error: error.message
        });
        console.log(`‚ùå ${modelName} - Erreur: ${error.message}`);
      }
      
      // Petite pause entre les tests
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    console.log("\n" + "=".repeat(60));
    console.log("üìä R√âSULTATS:");
    console.log("=".repeat(60));
    
    if (availableModels.length > 0) {
      console.log("\n‚úÖ MOD√àLES DISPONIBLES:");
      availableModels.forEach(model => {
        console.log(`   ‚Ä¢ ${model.name}`);
        console.log(`     Status: ${model.status}`);
        console.log(`     Test: ${model.testResponse}`);
        console.log("");
      });
    }
    
    if (unavailableModels.length > 0) {
      console.log("\n‚ùå MOD√àLES NON DISPONIBLES:");
      unavailableModels.forEach(model => {
        console.log(`   ‚Ä¢ ${model.name} - ${model.status}`);
        if (model.error) {
          console.log(`     Erreur: ${model.error}`);
        }
        console.log("");
      });
    }
    
    console.log("=".repeat(60));
    console.log(`üìà R√©sum√©: ${availableModels.length} mod√®les disponibles sur ${modelsToTest.length} test√©s`);
    
    if (availableModels.length > 0) {
      console.log("\nüí° RECOMMANDATION:");
      console.log("   Utilisez 'gemini-pro' pour le texte g√©n√©ral");
      console.log("   Utilisez 'gemini-pro-vision' pour les images");
    }
    
  } catch (error: any) {
    console.error("‚ùå Erreur lors de la v√©rification des mod√®les:", error.message);
    
    if (error.message.includes('API_KEY_INVALID')) {
      console.log("\nüí° SOLUTION:");
      console.log("   1. V√©rifiez que votre cl√© API est correcte");
      console.log("   2. Assurez-vous qu'elle est bien d√©finie dans le fichier .env");
      console.log("   3. Obtenez une nouvelle cl√© sur: https://makersuite.google.com/app/apikey");
    }
  }
}

// Fonction pour tester un mod√®le sp√©cifique
async function testSpecificModel(modelName: string): Promise<void> {
  try {
    console.log(`üß™ Test d√©taill√© du mod√®le: ${modelName}\n`);
    
    const genAI = new GoogleGenerativeAI(API_KEY!);
    const model = genAI.getGenerativeModel({ model: modelName });
    
    const testPrompts: string[] = [
      "Bonjour, comment allez-vous?",
      "Expliquez-moi l'intelligence artificielle en 2 phrases.",
      "G√©n√®re 3 tags pour: 'Machine Learning, Deep Learning, Neural Networks'"
    ];
    
    for (let i = 0; i < testPrompts.length; i++) {
      const prompt = testPrompts[i];
      console.log(`üìù Test ${i + 1}: ${prompt}`);
      
      const result = await model.generateContent(prompt!);
      const response = await result.response;
      const text = response.text();
      
      console.log(`üì§ R√©ponse: ${text}`);
      console.log("-".repeat(50));
    }
    
  } catch (error: any) {
    console.error(`‚ùå Erreur lors du test de ${modelName}:`, error.message);
  }
}

// Ex√©cution principale
async function main(): Promise<void> {
  console.log("üöÄ Script de v√©rification des mod√®les Gemini");
  console.log("=".repeat(50));
  
  // V√©rifier les arguments de ligne de commande
  const args = process.argv.slice(2);
  
  if (args.length > 0) {
    // Tester un mod√®le sp√©cifique
    await testSpecificModel(args[0]!);
  } else {
    // Lister tous les mod√®les disponibles
    await listAvailableModels();
  }
}

main().catch(console.error);
