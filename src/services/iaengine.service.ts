import { GoogleGenerativeAI } from "@google/generative-ai";

// Configuration globale de l'API
const API_KEY = process.env.GEMINI_API_KEY;

if (!API_KEY) {
    console.error("‚ùå Erreur: GEMINI_API_KEY n'est pas d√©finie dans les variables d'environnement.");
    console.log("üí° Cr√©ez un fichier .env avec: GEMINI_API_KEY=your_api_key_here");
}

/**
 * G√©n√®re un r√©sum√© du contenu d'une fiche
 * @param content - Contenu de la fiche √† r√©sumer
 * @returns R√©sum√© g√©n√©r√© par l'IA
 */
export const generateSummary = async (content: string): Promise<string> => {
    try {
        if (!API_KEY) {
            throw new Error("Cl√© API Gemini non configur√©e");
        }

        const genAI = new GoogleGenerativeAI(API_KEY);
        const model = genAI.getGenerativeModel({ model: "gemini-pro" });

        const prompt = `Fais un r√©sum√© concis (environ 3 phrases) du texte suivant en fran√ßais: ${content}`;

        const result = await model.generateContent(prompt);
        const response = await result.response;
        const summary = response.text();

        return summary.trim();
    } catch (error) {
        console.error("Erreur lors de la g√©n√©ration du r√©sum√©:", error);
        throw new Error("Impossible de g√©n√©rer le r√©sum√©");
    }
};

/**
 * G√©n√®re des tags automatiques bas√©s sur le contenu
 * @param content - Contenu de la fiche
 * @returns Liste de tags g√©n√©r√©s
 */
export const generateTags = async (content: string): Promise<string[]> => {
    try {
        if (!API_KEY) {
            throw new Error("Cl√© API Gemini non configur√©e");
        }

        const genAI = new GoogleGenerativeAI(API_KEY);
        const model = genAI.getGenerativeModel({ model: "gemini-pro" });

        const prompt = `G√©n√®re une liste de tags pertinents (mots-cl√©s, max 5) pour le texte suivant, s√©par√©s par des virgules: ${content}`;

        const result = await model.generateContent(prompt);
        const response = await result.response;
        const tagsText = response.text();

        // Parse les tags et les nettoie
        const tags = tagsText
            .split(',')
            .map((tag: string) => tag.trim().toLowerCase())
            .filter((tag: string) => tag.length > 0);

        return tags;
    } catch (error) {
        console.error("Erreur lors de la g√©n√©ration des tags:", error);
        throw new Error("Impossible de g√©n√©rer les tags");
    }
};

/**
 * G√©n√®re un r√©sum√© et des tags pour une fiche
 * @param content - Contenu de la fiche
 * @returns Objet contenant le r√©sum√© et les tags
 */
export const processContent = async (content: string): Promise<{
    summary: string;
    tags: string[];
}> => {
    try {
        const [summary, tags] = await Promise.all([
            generateSummary(content),
            generateTags(content)
        ]);

        return { summary, tags };
    } catch (error) {
        console.error("Erreur lors du traitement du contenu:", error);
        throw new Error("Impossible de traiter le contenu avec l'IA");
    }
};
